{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nlet nextIdVal = 0;\nexport function nextID() {\n  nextIdVal += 1;\n  return nextIdVal;\n}\nexport const peopleSlice = createSlice({\n  name: \"people\",\n  initialState: {\n    list: [{\n      name: \"Joe\",\n      img: \"/img/driver.png\",\n      id: nextID()\n    }, {\n      name: \"Mary\",\n      img: \"/img/driver2.png\",\n      id: nextID()\n    }],\n    loading: false\n  },\n  reducers: {\n    add: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter(person => {\n        return !removedIds.includes(person.id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map(person => {\n        if (person.id === action.payload.id) {\n          return action.payload;\n        }\n\n        return person;\n      });\n    }\n  }\n});\nexport const {\n  add,\n  remove,\n  update\n} = peopleSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n\nexport const incrementAsync = amount => dispatch => {\n  setTimeout(() => {//dispatch(incrementByAmount(amount));\n  }, 1000);\n}; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectPeople = state => state.people.list;\nexport const selectLoading = state => state.people.loading;\nexport default peopleSlice.reducer;","map":{"version":3,"sources":["/Users/junhee/Downloads/material-ui-dashboard-0.1.2/src/ReduxTable/peopleSlice.js"],"names":["createSlice","nextIdVal","nextID","peopleSlice","name","initialState","list","img","id","loading","reducers","add","state","action","push","payload","remove","removedIds","filter","person","includes","update","map","actions","incrementAsync","amount","dispatch","setTimeout","selectPeople","people","selectLoading","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,SAAS,GAAG,CAAhB;AAEA,OAAO,SAASC,MAAT,GAAkB;AACvBD,EAAAA,SAAS,IAAI,CAAb;AACA,SAAOA,SAAP;AACD;AAED,OAAO,MAAME,WAAW,GAAGH,WAAW,CAAC;AACrCI,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,CACJ;AAAEF,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,GAAG,EAAE,iBAApB;AAAuCC,MAAAA,EAAE,EAAEN,MAAM;AAAjD,KADI,EAEJ;AAAEE,MAAAA,IAAI,EAAE,MAAR;AAAgBG,MAAAA,GAAG,EAAE,kBAArB;AAAyCC,MAAAA,EAAE,EAAEN,MAAM;AAAnD,KAFI,CADM;AAKZO,IAAAA,OAAO,EAAE;AALG,GAFuB;AASrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtB;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACN,IAAN,CAAWQ,IAAX,CAAgBD,MAAM,CAACE,OAAvB;AACD,KAPO;AAQRC,IAAAA,MAAM,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACzB,YAAMI,UAAU,GAAGJ,MAAM,CAACE,OAA1B;AACAH,MAAAA,KAAK,CAACN,IAAN,GAAaM,KAAK,CAACN,IAAN,CAAWY,MAAX,CAAmBC,MAAD,IAAY;AACzC,eAAO,CAACF,UAAU,CAACG,QAAX,CAAoBD,MAAM,CAACX,EAA3B,CAAR;AACD,OAFY,CAAb;AAGD,KAbO;AAcRa,IAAAA,MAAM,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACN,IAAN,GAAaM,KAAK,CAACN,IAAN,CAAWgB,GAAX,CAAgBH,MAAD,IAAY;AACtC,YAAIA,MAAM,CAACX,EAAP,KAAcK,MAAM,CAACE,OAAP,CAAeP,EAAjC,EAAqC;AACnC,iBAAOK,MAAM,CAACE,OAAd;AACD;;AACD,eAAOI,MAAP;AACD,OALY,CAAb;AAMD;AArBO;AAT2B,CAAD,CAA/B;AAkCP,OAAO,MAAM;AAAER,EAAAA,GAAF;AAAOK,EAAAA,MAAP;AAAeK,EAAAA;AAAf,IAA0BlB,WAAW,CAACoB,OAA5C,C,CAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACtDC,EAAAA,UAAU,CAAC,MAAM,CACf;AACD,GAFS,EAEP,IAFO,CAAV;AAGD,CAJM,C,CAMP;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIhB,KAAD,IAAWA,KAAK,CAACiB,MAAN,CAAavB,IAA7C;AACP,OAAO,MAAMwB,aAAa,GAAIlB,KAAD,IAAWA,KAAK,CAACiB,MAAN,CAAapB,OAA9C;AAEP,eAAeN,WAAW,CAAC4B,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nlet nextIdVal = 0;\n\nexport function nextID() {\n  nextIdVal += 1;\n  return nextIdVal;\n}\n\nexport const peopleSlice = createSlice({\n  name: \"people\",\n  initialState: {\n    list: [\n      { name: \"Joe\", img: \"/img/driver.png\", id: nextID() },\n      { name: \"Mary\", img: \"/img/driver2.png\", id: nextID() },\n    ],\n    loading: false,\n  },\n  reducers: {\n    add: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.list.push(action.payload);\n    },\n    remove: (state, action) => {\n      const removedIds = action.payload;\n      state.list = state.list.filter((person) => {\n        return !removedIds.includes(person.id);\n      });\n    },\n    update: (state, action) => {\n      state.list = state.list.map((person) => {\n        if (person.id === action.payload.id) {\n          return action.payload;\n        }\n        return person;\n      });\n    },\n  },\n});\n\nexport const { add, remove, update } = peopleSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount) => (dispatch) => {\n  setTimeout(() => {\n    //dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectPeople = (state) => state.people.list;\nexport const selectLoading = (state) => state.people.loading;\n\nexport default peopleSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}